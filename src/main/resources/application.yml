# Server Configuration
server:
  port: ${PORT:8080}

# Spring Boot Configuration
spring:
  application:
    name: ${SPRING_APPLICATION_NAME:claims-service}
  r2dbc:
    url: ${SPRING_R2DBC_URL:r2dbc:postgresql://localhost:5432/orders}
    username: ${SPRING_R2DBC_USERNAME:postgres}
    password: ${SPRING_R2DBC_PASSWORD:postgres}
  logging:
    level:
      org.springframework.r2dbc: DEBUG
      org.springframework.data.r2dbc: DEBUG
      io.r2dbc.postgresql: DEBUG
      com.wfld.claims.demo: DEBUG
      org.springframework.security: DEBUG
      org.springframework.web: DEBUG
      io.opentelemetry: DEBUG
  security:
    oauth2:
      client:
        registration:
          ping:
            client-id: ${PING_CLIENT_ID:your-client-id}
            client-secret: ${PING_CLIENT_SECRET:your-client-secret}
            issuer-uri: ${PING_ISSUER_URI:https://your-pingfederate-server}
            scope:
              - openid
              - profile
              - email
              - can-request-claims
              - can-submit-claims

# OpenTelemetry Configuration
management:
  tracing:
    sampling:
      probability: 1.0
  otlp:
    tracing:
      endpoint: ${OTLP_ENDPOINT:http://localhost:4317}
  metrics:
    tags:
      application: ${spring.application.name}
    export:
      prometheus:
        enabled: true
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      getAllClaims:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
        permittedNumberOfCallsInHalfOpenState: 3
      createClaim:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
        permittedNumberOfCallsInHalfOpenState: 3
  retry:
    instances:
      getAllClaims:
        maxAttempts: 3
        waitDuration: 100
        multiplier: 2
        maxDuration: 1000
        retryExceptions:
          - org.springframework.dao.DataAccessException
      createClaim:
        maxAttempts: 3
        waitDuration: 100
        multiplier: 2
        maxDuration: 1000
        retryExceptions:
          - org.springframework.dao.DataAccessException

opentelemetry:
  config:
    trace-id-ratio-based: 1.0
    otel:
      exporter:
        otlp:
          endpoint: ${OTLP_ENDPOINT:http://localhost:4317}
      service:
        name: ${spring.application.name}
      propagators: b3
      resource:
        attributes:
          service.name: ${spring.application.name}